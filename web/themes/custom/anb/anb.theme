<?php

/**
 * @file
 * Main file for ANB theme.
 */

use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme().
 */
function anb_theme($existing, $type, $theme, $path)
{
  return [
    'account_menu_link' => [
      'variables' => [],
      'path' => $path . '/templates/block'
    ],
    'header_actions' => [
      'variables' => [],
      'path' => $path . '/templates/block'
    ],
    'header_contacts' => [
      'variables' => [
        'phone' => NULL,
      ],
      'path' => $path . '/templates/block'
    ],
    'footer_contacts' => [
      'variables' => [
        'contacts' => NULL,
      ],
      'path' => $path . '/templates/block'
    ],
    'footer_copyright' => [
      'variables' => [
        'policy_url' => NULL,
      ],
      'path' => $path . '/templates/block'
    ],
    'social_widgets' => [
      'variables' => [
        'data' => NULL,
      ],
      'path' => $path . '/templates/block'
    ],
  ];
}

/**
 * Implements hook_page_attachments_alter().
 */
function anb_page_attachments_alter(array &$attachments)
{
  $route = \Drupal::routeMatch();
  $current_route = $route->getRouteName();
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  $node = $route->getParameter('node');

  // Blog library.
  if ($current_route === 'view.blog.all' || $current_route === 'view.news.all') {
    $attachments['#attached']['library'][] = 'anb/blog';
  }

  // Front.
  if ($is_front) {
    $attachments['#attached']['library'][] = 'anb/front';
    $attachments['#attached']['library'][] = 'anb/clients_partners';
    $attachments['#attached']['library'][] = 'anb/blog';
  }

  if ($node !== null) {
    // Article node.
    if ($node->bundle() === 'article') {
      $attachments['#attached']['library'][] = 'anb/blog';
    }

    // About.
    if ($node->id() === '5') {
      $attachments['#attached']['library'][] = 'anb/about';
    }

    // Contacts library.
    if ($node->id() === '9') {
      $attachments['#attached']['library'][] = 'anb/contacts';
    }

    // Clients/partners.
    if ($node->id() === '7' || $node->id() === '8') {
      $attachments['#attached']['library'][] = 'anb/clients_partners';
    }

    // Promos.
    if ($node->id() === '6') {
      $attachments['#attached']['library'][] = 'anb/promotions';
    }

    // Jobs.
    if ($node->id() === '14') {
      $attachments['#attached']['library'][] = 'anb/jobs';
    }

    // Production.
    if ($node->id() === '16' || $is_front) {
      $attachments['#attached']['library'][] = 'anb/production';
    }

    // Services.
    if ($node->bundle() === 'service' || $node->id() === '4' || $is_front) {
      $attachments['#attached']['library'][] = 'anb/services';
    }

    // /about & /ar
    if ($node->id() === '5' || $node->id() === '33') {
      $attachments['#attached']['library'][] = 'anb/ar';
    }
  }

  // Account pages.
  $account_routes = [
    'anb_account.fuel_transit',
    'anb_account.fuel_story',
    'anb_account.fuel_residues',
    'anb_account.payment_history',
    'anb_account.account_settings',
  ];

  if (in_array($current_route, $account_routes)) {
    $attachments['#attached']['library'][] = 'anb/account';
  }
}

/**
 * Implements hook_preprocess_html().
 */
function anb_preprocess_html(&$variables)
{
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'is-front';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function anb_preprocess_page(&$variables)
{
  $page = &$variables['page'];

  // Layout attributes.
  $layout_attributes = new Attribute();
  $layout_attributes->addClass('main-layout');

  // Production pages.
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');
  $term = $route_match->getParameter('taxonomy_term');

  if (!is_null($node)) {
    if ($node->id() === '16') {
      $layout_attributes->addClass('production-page');
    }

    if ($node->bundle() === 'service') {
      $layout_attributes->addClass('no-overflow');
    }
  }

  if (!is_null($term)) {
    if ($term->bundle() === 'catalog') {
      $layout_attributes->addClass('production-page');
      $layout_attributes->addClass('production-page--term');
    }
  }

  $variables['layout_attributes'] = $layout_attributes;

  // Header.
  $page['header_top']['actions'] = [
    '#theme' => 'header_actions',
  ];

  $contacts_config = \Drupal::config('system.site')->getRawData();
  $page['header_top']['contacts'] = [
    '#theme' => 'header_contacts',
    '#phone' => $contacts_config['phone'],
  ];

  // Footer.
  $contacts = [
    'phone' => $contacts_config['phone'],
    'email' => $contacts_config['email'],
    'address' => $contacts_config['address'],
    'telegram' => $contacts_config['telegram'],
  ];

  $page['footer']['footer_top'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['footer-top']
    ],
  ];
  $page['footer']['footer_top']['menu'] = $page['footer']['footer_menu'];
  unset($page['footer']['footer_menu']);

  $page['footer']['footer_top']['widgets'] = [
    '#theme' => 'social_widgets',
    '#data' => $contacts,
  ];

  $page['footer']['top']['contacts'] = [
    '#theme' => 'footer_contacts',
    '#contacts' => $contacts,
    '#weight' => -1,
  ];
  $policy_url = Url::fromRoute('entity.node.canonical', ['node' => 10])->toString();
  $page['footer']['copyright'] = [
    '#theme' => 'footer_copyright',
    '#policy_url' => $policy_url,
  ];
}

/**
 * Implements hook_preprocess_block().
 */
function anb_preprocess_block(&$variables)
{
  $block_class = Html::cleanCssIdentifier($variables['elements']['#id']);
  $variables['block_class'] = $block_class;

  // Content blocks.
  if (isset($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];

    if ($block->bundle() === 'equipment') {
      $variables['attributes']['class'][] = 'equipment-slider';
    }

    if ($block->bundle() === 'docs') {
      $variables['attributes']['class'] = 'certificates_block';
    }
  }

  // Services list.
  if ($variables['derivative_plugin_id'] === 'services-list') {
    $node = \Drupal::routeMatch()->getParameter('node');

    // Full screen service block.
    if (!is_null($node)) {
      if ($node->id() === '4') {
        $variables['attributes']['class'][] = 'services-full';
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function anb_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements template_preprocess_field().
 */
function anb_preprocess_field(&$variables)
{
  $field_name = $variables['field_name'];
  $variables['field_name'] = Html::cleanCssIdentifier($field_name);

  // Jobs description field.
  if ($field_name === 'field_job_description') {
    $variables['attributes']['class'][] = 'body';
  }

  // Certificate photo.
  if ($field_name === 'field_certificate_photo') {
    $media = $variables['element']['#items'][0]->entity;
    $uri = $media->field_media_image->entity->uri->value;
    $variables['uri'] = $uri;
  }

  if ($field_name === 'field_smalldesc') {
    $variables['attributes']['class'][] = 'body';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function anb_theme_suggestions_field_alter(array &$suggestions, array $variables)
{
  $field_name = $variables['element']['#field_name'];
  $suggestion_name = [
    'field',
    $variables['element']['#entity_type'],
    $variables['element']['#field_name'],
    $variables['element']['#view_mode'],
  ];

  // Clean layout fields.
  $clean_fields = [
    'field_media_image',
    'field_jobs',
    'name',
  ];
  if (in_array($field_name, $clean_fields)) {
    $suggestions[] = 'field__clean';
  }

  $suggestions[] = implode('__', $suggestion_name);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function anb_preprocess_menu_local_tasks(&$variables)
{
  if (isset($variables['primary']['entity.node.delete_form'])) {
    $variables['primary']['entity.node.delete_form']['#weight'] = 101;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function anb_preprocess_region(&$variables)
{
  $variables['region'] = Html::cleanCssIdentifier($variables['region']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function anb_preprocess_node(&$variables)
{
  $node = $variables['elements']['#node'];

  if ($node->id() === '4') {
    $variables['attributes']['class'][] = 'services-page';
  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function anb_preprocess_fuel_residues(&$variables)
{
  $variables['#attached']['library'][] = 'anb/fuel-residues';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function anb_preprocess_fuel_transit(&$variables)
{
  $variables['#attached']['library'][] = 'anb/fuel-transit';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function anb_preprocess_fuel_story(&$variables)
{
  $variables['#attached']['library'][] = 'anb/fuel-story';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function anb_preprocess_payment_history(&$variables)
{
  $variables['#attached']['library'][] = 'anb/payment-history';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Login Form
 */
function anb_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  $form['name']['#description'] = 'Укажите ваше имя или e-mail на сайте Ангелинская Нефтебаза.';
  $form['name']['#title'] = 'Имя пользователя или E-mail';
  $form['#validate'] = ['anb_user_login_form_validate','::validateName', '::validateAuthentication', '::validateFinal', '::validateForm'];
}
/**
 * Custom validate handler for the login form.
 */
function anb_user_login_form_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state)
{
  $values = $form_state->cleanValues()->getValues();
  if (filter_var($values['name'], FILTER_VALIDATE_EMAIL)) {
    $user = user_load_by_mail($values['name']);
    if ($user) {
      $password = $values['pass'];
      $password_hasher = \Drupal::service('password');
      $hashed_password = $user->getPassword();
      $check = $password_hasher->check($password, $hashed_password);
      if ($check) {
        $form_state->setValue('name', $user->getAccountName());
      } else {
        $form_state->setErrorByName('', 'Проверьте правильность ввода пароля!');
      }
    } else {
      $form_state->setErrorByName('', 'Пользователь с таким e-mail не найден!');
    }
  }
}