<?php

/**
 * @file
 * Primary module hooks for ANB Account module.
 */

use Drupal\anb_account\Event\ModerationEvent;
use Drupal\anb_account\Event\ModerationEvents;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\anb_account\Utility\UserFormHelper;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_theme().
 */
function anb_account_theme($existing, $type, $theme, $path) {
  return [
    'account_menu' => [
      'variables' => [
        'links' => NULL,
      ],
    ],
    'fuel_residues' => [
      'variables' => [],
    ],
    'fuel_transit' => [
      'variables' => [],
    ],
    'fuel_story' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function anb_account_preprocess_page_title(&$variables) {
  $current_route = \Drupal::routeMatch()->getRouteName();

  $account_routes = [
    'anb_account.fuel_transit',
    'anb_account.fuel_story',
    'anb_account.fuel_residues',
    'anb_account.account_settings',
  ];

  if (in_array($current_route, $account_routes)) {
    $variables['title'] = new TranslatableMarkup('Personal account');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function anb_account_preprocess_toolbar(&$variables) {
  $variables['#attached']['library'][] = 'anb_account/toolbar';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function anb_account_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'user-form') {
    $user_form_helper = new UserFormHelper();
    $user_form_helper->alterForm($form, $form_state);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function anb_account_user_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Disallow moderators to interact with administrator accounts.
  if (in_array('moderator', $account->getRoles())) {
    if ($entity->hasPermission('administer site configuration')) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function anb_account_user_insert(EntityInterface $entity) {
  // Fire moderator created account event.
  $current_user = \Drupal::currentUser();
  if (!in_array('moderator', $current_user->getRoles())) {
    return;
  }

  /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
  $dispatcher = \Drupal::service('event_dispatcher');
  $event = new ModerationEvent($entity, $current_user->id());
  $dispatcher->dispatch($event, ModerationEvents::MODERATOR_CREATED_ACCOUNT);
}

/**
 * Implements hook_entity_delete().
 */
function anb_account_entity_delete(EntityInterface $entity) {
  // Fire moderator deleted account event.
  $current_user = \Drupal::currentUser();
  if (!in_array('moderator', $current_user->getRoles())) {
    return;
  }

  /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
  $dispatcher = \Drupal::service('event_dispatcher');
  $event = new ModerationEvent($entity, $current_user->id());
  $dispatcher->dispatch($event, ModerationEvents::MODERATOR_CANCELED_ACCOUNT);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function anb_account_user_update(EntityInterface $entity) {
  // Fire moderator activated/disabled account event.
  $current_user = \Drupal::currentUser();
  if (!in_array('moderator', $current_user->getRoles())) {
    return;
  }


  $is_active = $entity->isActive();
  $is_active_original = $entity->original->isActive();

  if ($is_active === $is_active_original) {
    return;
  }

  /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
  $dispatcher = \Drupal::service('event_dispatcher');
  $event = new ModerationEvent($entity, $current_user->id());
  $event_id = $is_active ? ModerationEvents::MODERATOR_ACTIVATED_ACCOUNT : ModerationEvents::MODERATOR_DISABLED_ACCOUNT;
  $dispatcher->dispatch($event, $event_id);
}
