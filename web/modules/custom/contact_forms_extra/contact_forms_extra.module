<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;

/**
 * Implements hook_form_alter().
 */
function contact_forms_extra_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Contact forms.
  if (strpos($form_id, 'contact_message_') === 0) {
    // Fields customization.
    $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
    $form['name']['#type'] = 'textfield';
    $form['name']['#title_display'] = 'invisible';
    $form['mail']['#type'] = 'email';
    $form['mail']['#title_display'] = 'invisible';
    $form['mail']['#attributes']['placeholder'] = $form['mail']['#title'];

    // Placeholders & field labels.
    $text_fields = [
      'field_phone',
      'field_email',
      'field_company',
      'message'
    ];
    foreach ($text_fields as $text_field) {
      if (!isset($form[$text_field])) {
        continue;
      }
      $form[$text_field]['widget'][0]['value']['#attributes']['placeholder'] = $form[$text_field]['widget'][0]['value']['#title'];
      $form[$text_field]['widget'][0]['value']['#title_display'] = 'invisible';
    }

    // Ajax submission message.
    $class_name = Html::getClass($form_id.'-form-processed');
    $form['#attributes']['class'][] = $class_name;

    $form['actions']['submit']['#ajax'] = [
      'callback' => 'contact_forms_extra_contact_form_sent',
      'event' => 'click',
    ];
  }

  // File field.
  if (isset($form['field_attachment'])) {
    unset($form['field_attachment']['widget'][0]['#description']);
    $form['field_attachment']['#attributes']['class'][] = 'filefield';
  }

  // Sent from page field.
  if (isset($form['field_sent_from'])) {
    unset($form['field_sent_from']['widget'][0]['value']['#title']);
    $form['field_sent_from']['widget'][0]['value']['#default_value'] = \Drupal::service('path.current')->getPath();
    $form['field_sent_from']['#attributes']['class'][] = 'visually-hidden';
  }

  // Agreement field.
  if (isset($form['field_agreement'])) {
    $form['field_agreement']['widget']['value']['#default_value'] = true;

    $form['field_agreement']['#attributes']['class'][] = 'agreement-field';
    $form['field_agreement']['#attributes']['class'][] = 'link';

    $url = Url::fromRoute('entity.node.canonical', ['node' => 10])->toString();
    $form['field_agreement']['widget']['value']['#title'] = 'Даю согласие на <a target="_blank" href="'.$url.'">обработку персональных денных</a>';

    // Move to actions.
    $form['actions']['field_agreement'] = $form['field_agreement'];
    unset($form['field_agreement']);

    $form_selector = $form['#attributes']['class'][0];

    $form['actions']['submit']['#states'] = [
      'disabled' => [
        'form.'.$form_selector.' input[name="field_agreement[value]"]' => ['checked' => false],
      ],
    ];
  };

  // Question form.
  if ($form_id === 'contact_message_questionform_form') {
    $form['message']['widget'][0]['value']['#attributes']['placeholder'] = 'Ваш вопрос';
  }
}

/**
 * Submit callback for contact forms.
 */
function contact_forms_extra_contact_form_sent(&$form, FormStateInterface $form_state) {
  $form_state->setRebuild();

  // Add messages.
  $form['system_messages'] = [
    '#type' => 'status_messages',
    '#weight' => -100,
  ];

  $class_name = '.' . Html::getClass($form['#form_id'] . '-form-processed');
  $ajax_response = new AjaxResponse();
  $ajax_response->addCommand(new InvokeCommand($class_name, 'focus'));

  if ($form_state->isExecuted()) {
    unset($form['actions']);
  }

  $ajax_response->addCommand(new ReplaceCommand($class_name, $form));

  return $ajax_response;
}
